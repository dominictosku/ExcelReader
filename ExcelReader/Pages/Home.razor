@page "/"
@using ExcelReader.Entities
@using ExcelReader.Entities.Enums
@using ExcelReader.Interfaces
@using ExcelReader.Services
@inject IExcelService ExcelService;
@inject ILogger<Home> Logger;

<PageTitle>Home</PageTitle>

<h3>Aktien Statistik</h3>
<div class="col-md-6 p-3">
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Wähle eine Datei für die Berechnung aus.</RadzenText>
        <RadzenUpload Change=@HandleFileSelected class="w-100"
                      ChooseText="Auswählen"
                      InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})" />
    </RadzenCard>
</div>

@if (BrokerStocks != null && BrokerStocks.Any())
{
	<RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex=@selectedIndex>
		<Tabs>
			@foreach (var brokerStock in BrokerStocks)
			{

				<RadzenTabsItem Text="Verlauf">
					<ExcelTable BrokerStocks="brokerStock" />
				</RadzenTabsItem>
				<RadzenTabsItem Text="Jahresbericht">
				</RadzenTabsItem>
			}
		</Tabs>
	</RadzenTabs>

}
else
{
	<div>Keine Einträge vorhanden</div>
}

<style>
    #ddUpload {
        left: 0;
    }

        #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
            width: 100%;
            text-align: center;
            font-size: 16px;
            border-radius: 0;
        }
</style>


@code {
    private string fileName = string.Empty;
    private List<BrokerStocks>? BrokerStocks;
    private string? errorMessage;
    int selectedIndex = 0;

    private async Task HandleFileSelected(UploadChangeEventArgs args)
    {

        long maxFileSize = 10 * 1024 * 1024;
        foreach (var file in args.Files)
        {
            fileName = file.Name;

            try
            {
                using (var stream = file.OpenReadStream(maxFileSize))
                {
                    var buffer = new byte[file.Size];
                    await stream.ReadAsync(buffer, 0, (int)file.Size);
                    var stocks = ExcelService.ReadExcelFile(SupportedBroker.Swissquote, buffer);
                    BrokerStocks = new()
                    {
                        new BrokerStocks("Swissquote", stocks)
                    };
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("Failed to read excel: {ex}", ex);
                errorMessage = $"Fehler beim laden der Datei";
            }
        }
	}
}